// Place your key bindings in this file to override the defaultsauto[]
[
    {
      "key": "ctrl+shift+l",
      "command": "workbench.action.editor.changeLanguageMode"
    },
    {
      "key": "ctrl+k m",
      "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
      "key": "alt+h",
      "command": "editor.action.startFindReplaceAction"
    },
    {
      "key": "ctrl+h",
      "command": "-editor.action.startFindReplaceAction"
    },
    {
      "key": "ctrl+n",
      "command": "explorer.newFile"
    },
    {
      "key": "ctrl+shift+n",
      "command": "explorer.newFolder"
    },
    {
      "key": "ctrl+shift+n",
      "command": "-workbench.action.newWindow"
    },
    {
      "key": "ctrl+shift+t",
      "command": "-workbench.action.reopenClosedEditor"
    },
    {
      "key": "shift+alt+r",
      "command": "workbench.action.tasks.runTask"
    },
    {
      "key": "ctrl+,",
      "command": "-workbench.action.openSettings"
    },
    // debug
    {
      "key": "alt+b",
      "command": "editor.debug.action.toggleBreakpoint",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "alt+ctrl+b",
      "command": "editor.debug.action.conditionalBreakpoint",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "ctrl+'",
      "command": "workbench.action.debug.stepOver",
      "when": "debugState == 'stopped'"
    },
    {
      "key": "f10",
      "command": "-workbench.action.debug.stepOver",
      "when": "debugState == 'stopped'"
    },
    {
      "key": "ctrl+shift+;",
      "command": "workbench.action.debug.stepOut",
      "when": "debugState == 'stopped'"
    },
    {
      "key": "shift+f11",
      "command": "-workbench.action.debug.stepOut",
      "when": "debugState == 'stopped'"
    },
    {
      "key": "ctrl+;",
      "command": "workbench.action.debug.stepInto",
      "when": "debugState != 'inactive'"
    },
    {
      "key": "f11",
      "command": "-workbench.action.debug.stepInto",
      "when": "debugState != 'inactive'"
    },
    {
      "key": "ctrl+\\",
      "command": "workbench.action.debug.continue",
      "when": "inDebugMode"
    },
    {
      "key": "f5",
      "command": "-workbench.action.debug.continue",
      "when": "inDebugMode"
    },
    {
      "key": "ctrl+shift+i",
      "command": "-editor.action.formatDocument",
      "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    // terminal
    {
      "key": "alt+t",
      "command": "workbench.action.terminal.toggleTerminal",
      "when": "terminal.active"
    },
    {
      "key": "ctrl+`",
      "command": "-workbench.action.terminal.toggleTerminal",
      "when": "terminal.active"
    },
    {
      "key": "ctrl+u",
      "command": "workbench.action.terminal.resizePaneUp",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+d",
      "command": "workbench.action.terminal.resizePaneDown",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+q",
      "command": "workbench.action.terminal.kill"
    },
    {
      "key": "ctrl+h",
      "command": "workbench.action.terminal.focusPreviousPane",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+.",
      "command": "workbench.action.terminal.split",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+shift+5",
      "command": "-workbench.action.terminal.split",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+l",
      "command": "workbench.action.terminal.focusNextPane",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+j",
      "command": "workbench.action.terminal.focusNext",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+k",
      "command": "workbench.action.terminal.focusPrevious",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+n",
      "command": "workbench.action.terminal.new",
      "when": "terminalFocus"
    },
    // close
    {
      "key": "ctrl+shift+x",
      "command": "workbench.action.closeOtherEditors",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    // navigation
    {
      "key": "alt+r",
      "command": "editor.action.goToReferences",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "alt+shift+,",
      "command": "workbench.action.navigateToLastEditLocation"
    },
    {
      "key": "alt+,",
      "command": "workbench.action.navigateBack"
    },
    {
      "key": "alt+.",
      "command": "workbench.action.navigateForward"
    },
    // timeline
    {
      "key": "alt+l",
      "command": "timeline.focus",
      "when": "editorTextFocus && neovim.mode != 'insert'"
    },
    {
      "key": "shift+alt+l",
      "command": "timeline.toggleFollowActiveEditor",
      "when": "editorTextFocus && neovim.mode != 'insert'"
    },
    // error & fix
    {
      "key": "shift+f",
      "command": "editor.action.autoFix",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "alt+n",
      "command": "editor.action.marker.nextInFiles",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "alt+shift+n",
      "command": "editor.action.marker.prevInFiles",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "ctrl+.",
      "command": "-editor.action.quickFix",
      "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    // split editor
    {
      "key": "ctrl+.",
      "command": "workbench.action.splitEditorRight",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "ctrl+h",
      "command": "workbench.action.focusLeftGroup",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "ctrl+l",
      "command": "workbench.action.focusRightGroup",
      "when": "editorTextFocus && neovim.mode != insert"
    },
    {
      "key": "ctrl+\\",
      "command": "-workbench.action.splitEditor"
    },
    {
      "key": "ctrl+k ctrl+\\",
      "command": "-workbench.action.splitEditorOrthogonal"
    },
    // focus windows
    {
      "key": "alt+s",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    {
      "key": "ctrl+b",
      "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
      "key": "alt+e",
      "command": "workbench.view.explorer"
    },
    {
      "key": "ctrl+shift+e",
      "command": "-workbench.view.explorer"
    },
    {
      "key": "alt+x",
      "command": "workbench.view.extensions"
    },
    {
      "key": "ctrl+shift+x",
      "command": "-workbench.view.extensions"
    },
    {
      "key": "alt+v",
      "command": "workbench.debug.action.focusVariablesView"
    },
    {
      "key": "alt+d",
      "command": "workbench.view.debug"
    },
    {
      "key": "ctrl+shift+d",
      "command": "-workbench.view.debug"
    },
    {
      "key": "alt+g",
      "command": "workbench.view.scm"
    },
    {
      "key": "ctrl+shift+g",
      "command": "-workbench.view.scm"
    },
    {
      "key": "alt+o",
      "command": "workbench.action.output.toggleOutput"
    },
    {
      "key": "ctrl+shift+u",
      "command": "-workbench.action.output.toggleOutput"
    },
    {
      "key": "alt+c",
      "command": "-toggleSearchEditorCaseSensitive",
      "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
      "key": "alt+c",
      "command": "-workbench.action.terminal.toggleFindCaseSensitive",
      "when": "terminalFindWidgetFocused"
    },
    {
      "key": "alt+c",
      "command": "-workbench.action.terminal.toggleFindCaseSensitive",
      "when": "terminalFocus"
    },
    {
      "key": "alt+c",
      "command": "-toggleFindCaseSensitive",
      "when": "editorFocus"
    },
    {
      "key": "alt+c",
      "command": "-toggleSearchCaseSensitive",
      "when": "searchViewletFocus && searchViewletVisible && !fileMatchOrFolderMatchFocus"
    },
    {
      "key": "alt+c",
      "command": "workbench.debug.action.toggleRepl"
    },
    {
      "key": "ctrl+shift+y",
      "command": "-workbench.debug.action.toggleRepl"
    },
    {
      "key": "ctrl+.",
      "command": "-problems.action.showQuickFixes",
      "when": "problemFocus"
    },
    {
      "key": "alt+p",
      "command": "-keybindings.editor.toggleSortByPrecedence",
      "when": "inKeybindings"
    },
    {
      "key": "alt+p",
      "command": "workbench.actions.view.problems"
    },
    {
      "key": "ctrl+shift+m",
      "command": "-workbench.actions.view.problems"
    },
    {
      "key": "ctrl+e",
      "command": "workbench.action.focusActiveEditorGroup"
    },
    {
      "key": "alt+z",
      "command": "workbench.action.toggleZenMode"
    },
    {
      "key": "ctrl+k z",
      "command": "-workbench.action.toggleZenMode"
    },
    {
      "key": "alt+w",
      "command": "editor.action.toggleWordWrap"
    },
    {
      "key": "alt+z",
      "command": "-editor.action.toggleWordWrap"
    },
    {
      "key": "alt+z",
      "command": "-editor.action.toggleWordWrap"
    },
    {
      "key": "ctrl+k",
      "command": "editor.fold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+shift+[",
      "command": "-editor.fold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+j",
      "command": "editor.unfold",
      "when": "editorTextFocus && foldingEnabled"
    },
    {
      "key": "ctrl+shift+]",
      "command": "-editor.unfold",
      "when": "editorTextFocus && foldingEnabled"
    },
  ]
  
  