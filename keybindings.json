[
  //-------------------------------------------run---------------------------------------------
  {
    // run current file without debugging
    "key": "ctrl+shift+\\",
    "command": "workbench.action.debug.run",
  },
  //-------------------------------------------vscode---------------------------------------------
  {
    "key": "alt+e",
    "command": "workbench.action.focusActiveEditorGroup",
  },
  {
    "key": "alt+a",
    "command": "workbench.action.toggleSidebarVisibility",
  },
  {
    "key": "alt+s",
    "command": "workbench.action.togglePanel",
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "alt+p",
    "command": "workbench.actions.view.problems"
  },
  {
    "key": "alt+o",
    "command": "workbench.action.output.toggleOutput"
  },
  {
    "key": "alt+c",
    "command": "workbench.debug.action.toggleRepl"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.toggleZenMode"
  },
  //-------------------------------------------editor---------------------------------------------
  {
    "key": "space r",
    "command": "editor.action.startFindReplaceAction",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space w",
    "command": "editor.action.toggleWordWrap",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+k",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+j",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "alt+r",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor && neovim.mode != i"
  },
  {
    "command": "editor.action.rename",
    "key": "space shift+r",
    "when": "editorTextFocus && neovim.mode!=insert",
  },
  {
    "command": "editor.action.wordHighlight.next",
    "key": "alt+1",
  },
  {
    "command": "workbench.action.quickOpen",
    "key": "space o s",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert",
    "args": "@:"
  },
  {
    "command": "editor.gotoNextFold",
    "key": "ctrl+down",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "command": "editor.gotoPreviousFold",
    "key": "ctrl+up",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "command": "editor.gotoParentFold",
    "key": "ctrl+shift+up",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+down",
    "command": "editor.action.wordHighlight.next",
    "when": "(!inputFocus || editorTextFocus && neovim.mode != insert) && editorTextFocus && hasWordHighlights"
  },
  {
    "key": "ctrl+up",
    "command": "editor.action.wordHighlight.prev",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "command": "workbench.action.gotoLine",
    "key": "space o l",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert",
  },
  {
    "command": "editor.action.jumpToBracket",
    "key": "shift-5",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert",
  },
  //-------------------------------------------files---------------------------------------------
  // open 
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  // save
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.save"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveAll"
  },
  // close
  {
    "key": "alt+q",
    "command": "workbench.action.closeActiveEditor",
    "when": "editorIsOpen"
  },
  {
    "key": "alt+shift+q",
    "command": "workbench.action.reopenClosedEditor",
    "when": "canReopenClosedEditor"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.closeOtherEditors",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  // new
  {
    "key": "ctrl+n",
    "command": "explorer.newFile"
  },
  {
    "key": "ctrl+shift+n",
    "command": "explorer.newFolder"
  },
  // search word
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.findInFiles"
  },
  //-------------------------------------------window---------------------------------------------
  {
    "key": "alt+;",
    "command": "workbench.action.splitEditorRight",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.focusLeftGroup",
    "when": "editorTextFocus || terminalEditorFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.focusSideBar",
    "when": "activeEditorGroupIndex == 1"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.focusRightGroup",
    "when": "activeEditorGroupIndex >= 1"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarFocus"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.focusPanel",
    "when": "!sideBarFocus && !panelFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "panelFocus"
  },
  {
    "key": "alt+space",
    "command": "workbench.action.toggleCenteredLayout",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+m",
    "command": "workbench.action.toggleEditorWidths"
  },
  {
    "key": "shift+alt+k",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "shift+alt+j",
    "command": "workbench.action.decreaseViewSize"
  },
  //-------------------------------------------file explorer---------------------------------------------
  {
    "key": "alt+f",
    "command": "workbench.view.explorer",
    "when": "focusedView != workbench.explorer.fileView",
  },
  {
    "key": "alt+f",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "focusedView == workbench.explorer.fileView",
  },
  {
    "key": "alt+k",
    "command": "workbench.explorer.fileView.focus",
    "when": "focusedView == outline"
  },
  {
    "key": "alt+j",
    "command": "timeline.focus",
    "when": "filesExplorerFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.explorer.fileView.focus",
    "when": "focusedView == timeline"
  },
  {
    "key": "alt+j",
    "command": "timeline.focus",
    "when": "focusedView == outline"
  },
  {
    "key": "alt+k",
    "command": "timeline.focus",
    "when": "focusedView == rustDependencies"
  },
  {
    "key": "alt+j",
    "command": "rustDependencies.focus",
    "when": "focusedView == timeline && inRustProject"
  },
  //-------------------------------------------extension---------------------------------------------
  {
    "key": "alt+x",
    "command": "workbench.view.extensions",
    "when": "activeViewlet != workbench.view.extensions",
  },
  {
    "key": "alt+x",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "activeViewlet == workbench.view.extensions",
  },
  {
    "key": "alt+j",
    "command": "workbench.views.extensions.installed.focus",
    "when": "activeViewlet == workbench.view.extensions && focusedView == ''",
  },
  {
    "key": "alt+k",
    "command": "workbench.extensions.action.installExtensions",
    "when": "focusedView == workbench.views.extensions.installed",
  },
  {
    "key": "alt+j",
    "command": "workbench.views.extensions.enabled.focus",
    "when": "focusedView == workbench.views.extensions.installed",
  },
  {
    "key": "alt+k",
    "command": "workbench.views.extensions.installed.focus",
    "when": "focusedView == workbench.views.extensions.enabled",
  },
  {
    "key": "alt+j",
    "command": "workbench.views.extensions.disabled.focus",
    "when": "focusedView == workbench.views.extensions.enabled",
  },
  {
    "key": "alt+k",
    "command": "workbench.views.extensions.enabled.focus",
    "when": "focusedView == workbench.views.extensions.disabled",
  },
  //-------------------------------------------tab---------------------------------------------
  {
    "key": "alt+u",
    "command": "workbench.action.previousEditor",
    "when": "(activeEditorGroupIndex >= 1 || terminalEditorFocus)"
  },
  {
    "key": "alt+i",
    "command": "workbench.action.nextEditor",
    "when": "(activeEditorGroupIndex >= 1 || terminalEditorFocus)"
  },
  {
    "key": "alt+u",
    "command": "workbench.action.previousPanelView",
    "when": "panelFocus"
  },
  {
    "key": "alt+i",
    "command": "workbench.action.nextPanelView",
    "when": "panelFocus"
  },
  {
    "key": "alt+shift+u",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "alt+shift+i",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  //-------------------------------------------debug---------------------------------------------
  {
    "key": "alt+d",
    "command": "workbench.debug.action.focusVariablesView",
    "when": "focusedView != workbench.debug.variablesView",
  },
  {
    "key": "alt+d",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "focusedView == workbench.debug.variablesView",
  },
  {
    "key": "alt+k",
    "command": "workbench.debug.action.focusBreakpointsView",
    "when": "activeViewlet == workbench.view.debug"
  },
  {
    "key": "alt+j",
    "command": "workbench.debug.action.focusVariablesView",
    "when": "activeViewlet == workbench.view.debug"
  },
  {
    "key": "alt+k",
    "command": "workbench.debug.action.focusBreakpointsView",
    "when": "focusedView == workbench.debug.variablesView",
  },
  {
    "key": "alt+j",
    "command": "workbench.debug.action.focusWatchView",
    "when": "focusedView == workbench.debug.variablesView",
  },
  {
    "key": "alt+k",
    "command": "workbench.debug.action.focusVariablesView",
    "when": "focusedView == workbench.debug.watchExpressionsView",
  },
  {
    "key": "alt+j",
    "command": "workbench.debug.action.focusCallStackView",
    "when": "focusedView == workbench.debug.watchExpressionsView",
  },
  {
    "key": "alt+k",
    "command": "workbench.debug.action.focusWatchView",
    "when": "focusedView == workbench.debug.callStackView",
  },
  {
    "key": "alt+j",
    "command": "workbench.debug.action.focusBreakpointsView",
    "when": "focusedView == workbench.debug.callStackView",
  },
  {
    "key": "alt+k",
    "command": "workbench.debug.action.focusCallStackView",
    "when": "focusedView == workbench.debug.breakPointsView",
  },
  // step
  {
    "key": "ctrl+'",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+shift+;",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.debug.start",
    "when": "!inDebugMode && !inRustProject"
  },
  {
    "key": "ctrl+\\",
    "command": "rust-analyzer.debug",
    "when": "!inDebugMode && inRustProject"
  },
  {
    "key": "shift+\\",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !inputFocus"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "space o c",
    "command": "workbench.action.debug.callStackTop",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert && inDebugMode"
  },
  // launch
  {
    "key": "space d l",
    "command": "workbench.action.debug.selectandstart",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  // watch
  {
    "key": "space w",
    "command": "editor.debug.action.selectionToWatch",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "enter",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused && !inputFocus",
  },
  {
    "key": "i",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused && !inputFocus",
  },
  {
    "key": "r",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused && !inputFocus",
  },
  {
    "key": "d",
    "command": "debug.removeWatchExpression",
    "when": "watchExpressionsFocused && !inputFocus",
  },
  //stack
  {
    "key": "space d k",
    "command": "workbench.action.debug.callStackUp",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert && inDebugMode"
  },
  {
    "key": "space d j",
    "command": "workbench.action.debug.callStackDown",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert && inDebugMode"
  },
  // breakpoint
  {
    "key": "alt+b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+shift+b",
    "command": "editor.debug.action.conditionalBreakpoint",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "d",
    "command": "debug.removeBreakpoint",
    "when": "breakpointsFocused",
  },
  {
    "key": "x",
    "command": "debug.toggleBreakpoint",
    "when": "breakpointsFocused",
  },
  {
    "key": "space o b",
    "command": "editor.debug.action.goToNextBreakpoint",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space o shift+b",
    "command": "editor.debug.action.goToPreviousBreakpoint",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  //-------------------------------------------terminal---------------------------------------------
  {
    "key": "alt+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "alt+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  {
    "key": "alt+q",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus",
  },
  {
    "key": "alt+q",
    "command": "workbench.action.terminal.killEditor",
    "when": "activeEditor == terminalEditor",
  },
  {
    "key": "alt+;",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus"
  },
  {
    "key": "alt+shift+h",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "alt+shift+l",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && !terminalEditorFocus"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && !terminalEditorFocus"
  },
  {
    "key": "alt+m",
    "command": "workbench.action.terminal.moveToEditor",
    "when": "panelFocus"
  },
  {
    "key": "alt+m",
    "command": "workbench.action.terminal.moveToTerminalPanel",
    "when": "activeEditor == terminalEditor",
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+y",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+d",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+u",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.scrollToTop",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+shift+g",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocus",
  },
  {
    "key": "alt+,",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus",
  },
  {
    "key": "alt+.",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus",
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFocus",
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindFocused",
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFocus || terminalFindFocused",
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFocus || terminalFindFocused",
  },
  // navigation
  {
    "key": "alt+r",
    "command": "editor.action.goToReferences",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+shift+,",
    "command": "workbench.action.navigateToLastEditLocation"
  },
  {
    "key": "alt+,",
    "command": "workbench.action.navigateBack",
    "when": "!terminalFocus"
  },
  {
    "key": "alt+.",
    "command": "workbench.action.navigateForward",
    "when": "!terminalFocus"
  },
  {
    "key": "alt+/",
    "command": "workbench.action.keepEditor",
  },
  //-------------------------------------------git---------------------------------------------
  {
    "key": "alt+g",
    "command": "workbench.view.scm",
    "when": "focusedView != workbench.scm",
  },
  {
    "key": "alt+g",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "focusedView == workbench.scm",
  },
  {
    "key": "space g",
    "command": "macros.lazygit", //see settings.json macros
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+shift+c",
    "command": "gitlens.showCommitsView",
  },
  {
    "key": "alt+,",
    "command": "editor.action.diffReview.prev",
    "when": "(!inputFocus || editorTextFocus && neovim.mode != insert) && isInDiffEditor "
  },
  {
    "key": "alt+.",
    "command": "editor.action.diffReview.next",
    "when": "(!inputFocus || editorTextFocus && neovim.mode != insert) && isInDiffEditor "
  },
  //-------------------------------------------sql---------------------------------------------
  {
    "key": "space c d",
    "command": "sqltoolsViewConnectionExplorer.focus",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space c enter",
    "command": "sqltools.selectConnection",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+enter",
    "command": "sqltools.executeCurrentQuery",
    "when": "resourceExtname == .sql"
  },
  {
    "key": "alt+j",
    "command": "sqltoolsViewBookmarksExplorer.focus",
    "when": "focusedView == sqltoolsViewConnectionExplorer",
  },
  {
    "key": "alt+k",
    "command": "sqltoolsViewConnectionExplorer.focus",
    "when": "focusedView == sqltoolsViewBookmarksExplorer",
  },
  //-------------------------------------------error & fix---------------------------------------------
  //{
  //"key": "space f",
  //"command": "editor.action.autoFix",
  //"when": "editorTextFocus && neovim.mode != insert"
  //},
  {
    "key": "space f",
    "command": "editor.action.quickFix",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+n",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "alt+shift+n",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  //-------------------------------------------mac: ctrl+c, ctrl+p, ctrl+a, ctrl+x---------------------------------------------
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll"
  },
  {
    "key": "ctrl+x",
    "command": "editor.action.clipboardCutAction"
  },
  {
    "key": "ctrl+c",
    "command": "editor.action.clipboardCopyAction"
  },
  {
    "key": "ctrl+v",
    "command": "editor.action.clipboardPasteAction",
    "when": "!editorTextFocus || editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+v",
    "command": "execPaste",
    "when": "!editorTextFocus || editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "ctrl+v",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && neovim.mode != normal"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "key": "ctrl+c",
    "command": "execCopy"
  },
  {
    "key": "ctrl+c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus && neovim.mode != normal"
  },
  {
    "key": "ctrl+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "ctrl+c",
    "command": "problems.action.copy",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+c",
    "command": "remote.tunnel.copyAddressInline",
    "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "key": "ctrl+c",
    "command": "search.action.copyMatch",
    "when": "fileMatchOrMatchFocus"
  },
  {
    "key": "ctrl+a",
    "command": "list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && neovim.mode != normal"
  },
  {
    "key": "ctrl+x",
    "command": "execCut"
  },
  {
    "key": "ctrl+x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && neovim.mode != normal"
  },
  //--------------------------search----------------------------------------------
  {
    "key": "ctrl+j",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusSearchFromResults",
    "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+down",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+up",
    "command": "search.action.focusSearchFromResults",
    "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+up",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "d",
    "command": "search.action.remove",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  // -------------------------------quick open --------------------------------------------------
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+l",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+h",
    "command": "file-browser.stepOut",
    "when": "inFileBrowser"
  },
  {
    "key": "ctrl+l",
    "command": "file-browser.stepIn",
    "when": "inFileBrowser"
  },
  //------------------------------------------- settings ---------------------------------------------
  {
    "key": "space s j",
    "command": "workbench.action.openSettingsJson",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space s s",
    "command": "workbench.action.openSettings2",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space s d",
    "command": "workbench.action.openRawDefaultSettings",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space k j",
    "command": "workbench.action.openGlobalKeybindingsFile",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space k k",
    "command": "workbench.action.openGlobalKeybindings",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "space i",
    "command": "macros.init.lua", //see settings.json macros
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "f12",
    "command": "workbench.action.toggleDevTools",
  },
  {
    "key": "f11",
    "command": "workbench.action.inspectContextKeys",
  },
  //-------------------------------------------tasks---------------------------------------------
  {
    "key": "space t",
    "command": "workbench.action.tasks.runTask",
    "when": "!inputFocus || editorTextFocus && neovim.mode != insert"
  },
  //-------------------------------------------remove default---------------------------------------------
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction"
  },
  {
    "key": "cmd+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer"
  },
  {
    "key": "ctrl+shift+d",
    "command": "-workbench.view.debug"
  },
  {
    "key": "ctrl+shift+y",
    "command": "-workbench.debug.action.toggleRepl"
  },
  {
    "key": "ctrl+.",
    "command": "-problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "alt+p",
    "command": "-keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings"
  },
  {
    "key": "ctrl+shift+m",
    "command": "-workbench.actions.view.problems"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode"
  },
  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "ctrl+shift+[",
    "command": "-editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+]",
    "command": "-editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "ctrl+shift+t",
    "command": "-workbench.action.reopenClosedEditor"
  },
  {
    "key": "ctrl+,",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "f10",
    "command": "-workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f11",
    "command": "-workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "shift+f11",
    "command": "-workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+shift+i",
    "command": "-editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+\\",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+shift+x",
    "command": "-workbench.view.extensions"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm"
  },
  {
    "key": "ctrl+shift+u",
    "command": "-workbench.action.output.toggleOutput"
  },
  {
    "key": "alt+c",
    "command": "-toggleSearchEditorCaseSensitive",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+c",
    "command": "-workbench.action.terminal.toggleFindCaseSensitive",
    "when": "terminalFindWidgetFocused"
  },
  {
    "key": "alt+c",
    "command": "-workbench.action.terminal.toggleFindCaseSensitive",
    "when": "terminalFocus"
  },
  {
    "key": "alt+c",
    "command": "-toggleFindCaseSensitive",
    "when": "editorFocus"
  },
  {
    "key": "alt+c",
    "command": "-toggleSearchCaseSensitive",
    "when": "searchViewletFocus && searchViewletVisible && !fileMatchOrFolderMatchFocus"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "cmd+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "escape",
    "command": "-settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
]